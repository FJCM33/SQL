'''
Ejercicio 1

1. Crear una tabla llamada "Clientes" con las columnas: id (entero, clave primaria)nombre (texto) y email (texto).'''
CREATE TABLE IF NOT EXISTS clientes (
  	id serial PRIMARY KEY,
  	nombre VARCHAR(80),
	email VARCHAR(100));
'''2. Insertar un nuevo cliente en la tabla "Clientes" con id=1, nombre="Juan" y
email="juan@example.com".'''

INSERT INTO clientes (nombre, email) 
VALUES ('Juan', 'juan@example.com');

'''3. Actualizar el email del cliente con id=1 a "juan@gmail.com".'''
UPDATE clientes (email)
VALUES ('juan@gmail.com')
WHERE ID=1

'''
4. Eliminar el cliente con id=1 de la tabla "Clientes".'''
DELETE FROM clientes
WHERE ID=1

'''
5. Crear una tabla llamada "Pedidos" con las columnas: id (entero, clave primaria),
cliente_id (entero, clave externa referenciando a la tabla "Clientes"), producto
(texto) y cantidad (entero).'''
CREATE TABLE public.pedidos (
  	id serial Primary key,
	producto VARCHAR(100),
	cantidad int,
	cliente_id INT,
  FOREIGN KEY (cliente_id) REFERENCES clientes(id)
	);
'''
6. Insertar un nuevo pedido en la tabla "Pedidos" con id=1, cliente_id=1,
producto="Camiseta" y cantidad=2.'''
INSERT INTO public.pedidos (id, cliente_id, producto, cantidad)
VALUES (2, 1, 'Pantalon', 2);
'''
7. Actualizar la cantidad del pedido con id=1 a 3.'''
UPDATE public.pedidos (cantidad)
VALUES (3)
WHERE ID=1
'''
8. Eliminar el pedido con id=1 de la tabla "Pedidos".'''
DELETE FROM pedidos
WHERE id = 1

'''
9. Crear una tabla llamada "Productos" con las columnas: id (entero, clave
primaria), nombre (texto) y precio (decimal).'''
CREATE TABLE public."productos" (
  id serial Primary key,
	nombre VARCHAR(100),
	precio float
	);
'''
10. Insertar varios productos en la tabla "Productos" con diferentes valores.
'''
INSERT INTO public."productos" (nombre, precio)
VALUES ('Camiseta', 20),
 	   ('Pantalón', 30),
       ('Zapatos', 50)
'''
11. Consultar todos los clientes de la tabla "Clientes".
'''
SELECT * FROM public.clientes
'''
12. Consultar todos los pedidos de la tabla "Pedidos" junto con los nombres de los clientes correspondientes.
'''
SELECT *
FROM public.pedidos
JOIN public.clientes ON public.pedidos.cliente_id = public.clientes.id;
'''
13. Consultar los productos de la tabla "Productos" cuyo precio sea mayor a $50.
'''
SELECT * FROM public.productos
WHERE precio > 50;

'''
14. Consultar los pedidos de la tabla "Pedidos" que tengan una cantidad mayor o
igual a 5.
'''
SELECT * FROM public.pedidos
WHERE cantidad >= 5;

'''
15. Consultar los clientes de la tabla "Clientes" cuyo nombre empiece con la letra
"A".
'''
SELECT * FROM public.clientes
WHERE name LIKE  'A%';
'''
16. Realizar una consulta que muestre el nombre del cliente y el total de pedidos
realizados por cada cliente.
'''
SELECT name, COUNT(ventas.id) AS Num_pedidos
FROM clientes JOIN ventas ON ventas.client_id = clientes.id
GROUP BY name

'''
17. Realizar una consulta que muestre el nombre del producto y la cantidad total de
pedidos de ese producto.
'''
SELECT name, SUM(pedidos.cantidad) AS Num_pedidos
FROM productos JOIN pedidos ON productos.id = pedidos.product_id
GROUP BY name

'''
18. Agregar una columna llamada "fecha" a la tabla "Pedidos" de tipo fecha.
'''
ALTER TABLE Pedidos
ADD fecha DATE;

'''
19. Agregar una clave externa a la tabla "Pedidos" que haga referencia a la tabla
"Productos" en la columna "producto".
'''
'''
20. Realizar una consulta que muestre los nombres de los clientes, los nombres de
los productos y las cantidades de los pedidos donde coincida la clave externa.
'''

''' E S Q U E M A  B A S E  D E  D A T O S  P A R A  E J E R C I C I O S '''

DROP TABLE IF EXISTS productos CASCADE;

DROP TABLE IF EXISTS ventas CASCADE;

DROP TABLE IF EXISTS clientes CASCADE;

DROP TABLE IF EXISTS pedidos CASCADE;

CREATE TABLE clientes(  
    id INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(50),
    surname VARCHAR(50),
    lastname VARCHAR(50),
    NIE VARCHAR(50),
    telephone VARCHAR(20),
    email VARCHAR(50)
);

CREATE TABLE productos(  
    id INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(50),
    type VARCHAR(50),
    price VARCHAR(50)
);

CREATE TABLE ventas(  
    id INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    date TIMESTAMP,
    client_id INT,
    product_id INT,
    quantity VARCHAR(50),
	CONSTRAINT foreing_key_client
		FOREIGN KEY (client_id)
		REFERENCES Clientes(id),
	CONSTRAINT foreing_key_product
		FOREIGN KEY (product_id)
		REFERENCES Productos(id)
);

CREATE TABLE pedidos(  
    id INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    date TIMESTAMP,
    client_id INT,
    product_id INT,
    cantidad INT,
	CONSTRAINT foreing_key_client
		FOREIGN KEY (client_id)
		REFERENCES Clientes(id),
	CONSTRAINT foreing_key_product
		FOREIGN KEY (product_id)
		REFERENCES Productos(id)
);


''' J U E G O S  D E  D A T O S '''
INSERT INTO clientes (name, surname, lastname, NIE, telephone, email)
VALUES
    ('Juan', 'Pérez', 'García', 'X12345678', '123456789', 'juan@example.com'),
    ('María', 'López', 'Gómez', 'Y98765432', '987654321', 'maria@example.com'),
    ('Pedro', 'Martínez', 'Sánchez', 'Z56789012', '567890123', 'pedro@example.com'),
    ('Laura', 'González', 'Fernández', 'W34567890', '345678901', 'laura@example.com'),
    ('Carlos', 'Díaz', 'Gutiérrez', 'V23456789', '234567890', 'carlos@example.com'),
	('Ana', 'Ramírez', 'Martínez', 'U45678901', '456789012', 'ana@example.com'),
    ('Luis', 'Gómez', 'Hernández', 'T56789012', '5678901234', 'luis@example.com'),
    ('Elena', 'Vargas', 'Torres', 'S67890123', '6789012345', 'elena@example.com'),
    ('Miguel', 'Castillo', 'Pérez', 'R78901234', '7890123456', 'miguel@example.com'),
    ('Sofía', 'Ruiz', 'Gutiérrez', 'Q89012345', '8901234567', 'sofia@example.com');
	

INSERT INTO ventas (date, client_id, product_id, quantity)
VALUES
    ('2023-07-22', 1, 2, '2'),
    ('2023-07-23', 2, 5, '1'),
    ('2023-07-23', 3, 4, '3'),
    ('2023-07-25', 4, 3, '1'),
    ('2023-07-25', 5, 2, '2'),
    ('2023-07-25', 1, 1, '1'),
    ('2023-07-26', 2, 3, '2'),
    ('2023-07-27', 3, 5, '2'),
    ('2023-07-27', 4, 1, '1'),
    ('2023-07-27', 5, 4, '3'),
    ('2023-07-10', 1, 1, '2'),
    ('2023-07-12', 1, 3, '1'),
    ('2023-07-15', 2, 2, '3'),
    ('2023-07-18', 3, 1, '1'),
    ('2023-07-20', 4, 4, '2'),
    ('2023-07-20', 4, 5, '3'),
    ('2023-07-20', 5, 1, '1'),
    ('2023-07-20', 5, 2, '2');

INSERT INTO productos (name, type, price)
VALUES
    ('Sombrero', 'Accesorio', '24.99'),
    ('Falda', 'Ropa', '34.99'),
    ('Botas', 'Calzado', '79.99'),
    ('Bolso', 'Accesorio', '29.99'),
    ('Chaqueta', 'Ropa', '49.99'),
    ('Camisa', 'Ropa', '29.99'),
    ('Pantalón', 'Ropa', '39.99'),
    ('Zapatos', 'Calzado', '59.99'),
    ('Gorra', 'Accesorio', '14.99'),
    ('Bufanda', 'Accesorio', '19.99');

INSERT INTO pedidos (product_id, cantidad, client_id)
VALUES
    (1, 3, 1),
    (2, 10, 2),
    (3, 34, 3),
    (4, 3, 4),
    (5, 8, 5),
    (6, 35, 6),
    (7, 4, 4),
    (7, 54, 3),
    (2, 5, 1),
    (1, 54, 2);